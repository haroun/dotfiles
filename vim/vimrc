" Syntax highlighting
syntax on

set number                            " show line numbers in gutter
if exists('+relativenumber')
  set relativenumber                  " show relative numbers in gutter
endif

set tabstop=2                         " spaces per tab
set expandtab                         " always use spaces instead of tabs
set smarttab                          " <tab>/<BS> indent/dedent in leading whitespace
set shiftround                        " always indent by multiple of shiftwidth
set shiftwidth=2                      " spaces per tab (when shifting)

set splitbelow                        " open horizontal splits below current window
set splitright                        " open vertical splits to the right of the current window
set textwidth=120                     " automatically hard wrap at 120 columns
set scrolloff=3                       " start scrolling 3 lines before edge of viewport
set sidescrolloff=3                   " same as scolloff, but for columns

" Color scheme
" Use 24-bit (true-color) mode in Vim/Neovim.
" If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
" (see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (has("nvim"))
  " For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
if (has("termguicolors"))
  set termguicolors                   " Use 24-bit colors
endif
set background=dark
colorscheme base16-ocean

" set guifont=SF\ Mono:h14

" Lightline theme
let g:lightline = {
  \ 'colorscheme': 'one',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'gitbranch#name'
  \ },
  \ }

" ALE
" see https://github.com/alexlafroscia/dotfiles/blob/master/nvim/plugin/ale.vim
" Use a slightly slimmer error pointer
let g:ale_sign_error = '✖'
hi ALEErrorSign guifg=#DF8C8C guibg=#343D46
let g:ale_sign_warning = '⚠'
hi ALEWarningSign guifg=#F2C38F guibg=#343D46
" Use ALT-k and ALT-j to navigate errors
nmap <silent> ˚ <Plug>(ale_previous_wrap)
nmap <silent> ∆ <Plug>(ale_next_wrap)

" GitGutter
nmap ]c <Plug>GitGutterNextHunk
nmap [c <Plug>GitGutterPrevHunk
nmap <Leader>ha <Plug>GitGutterStageHunk
nmap <Leader>hr <Plug>GitGutterUndoHunk

" fzf
set rtp+=/usr/local/opt/fzf
map ; :Files<CR>
map <C-p> :Files<CR>
map <C-g> :GFiles<CR>
map <C-o> :Buffers<CR>
map <C-f> :Rg!

" deoplete
if has('nvim')
  let g:deoplete#enable_at_startup = 1
  if exists(':UpdateRemotePlugins') == 2
    UpdateRemotePlugins
  endif
  autocmd VimEnter * call deoplete#custom#option('num_processes', 4)
endif

" tern
let g:tern_map_keys = 1               " enable tern default key mappings https://github.com/ternjs/tern_for_vim/blob/master/doc/tern.txt

" deoplete-ternjs
" Use tern_for_vim.
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent"]
" Whether to include the types of the completions in the result data. Default: 0
let g:deoplete#sources#ternjs#types = 1
" Whether to include the distance (in scopes for variables, in prototypes for
" properties) between the completions and the origin position in the result
" data. Default: 0
let g:deoplete#sources#ternjs#depths = 1
" Whether to include documentation strings (if found) in the result data.
" Default: 0
let g:deoplete#sources#ternjs#docs = 1
" When on, only completions that match the current word at the given point will
" be returned. Turn this off to get all results, so that you can filter on the
" client side. Default: 1
let g:deoplete#sources#ternjs#filter = 0
" Whether to use a case-insensitive compare between the current word and
" potential completions. Default 0
let g:deoplete#sources#ternjs#case_insensitive = 1
" When completing a property and no completions are found, Tern will use some
" heuristics to try and return some properties anyway. Set this to 0 to
" turn that off. Default: 1
let g:deoplete#sources#ternjs#guess = 0
" Determines whether the result set will be sorted. Default: 1
let g:deoplete#sources#ternjs#sort = 0
" When disabled, only the text before the given position is considered part of
" the word. When enabled (the default), the whole variable name that the cursor
" is on will be included. Default: 1
let g:deoplete#sources#ternjs#expand_word_forward = 0
" Whether to ignore the properties of Object.prototype unless they have been
" spelled out by at least two characters. Default: 1
let g:deoplete#sources#ternjs#omit_object_prototype = 0
" Whether to include JavaScript keywords when completing something that is not
" a property. Default: 0
let g:deoplete#sources#ternjs#include_keywords = 1
" If completions should be returned when inside a literal. Default: 1
let g:deoplete#sources#ternjs#in_literal = 0
"Add extra filetypes
let g:deoplete#sources#ternjs#filetypes = [
  \ 'jsx',
  \ 'javascript.jsx',
  \ 'vue',
  \ '...'
  \ ]
