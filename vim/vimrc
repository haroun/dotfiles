" Syntax highlighting
syntax on

set number                            " show line numbers in gutter
if exists('+relativenumber')
  set relativenumber                  " show relative numbers in gutter
endif

set tabstop=2                         " spaces per tab
set expandtab                         " always use spaces instead of tabs
set smarttab                          " <tab>/<BS> indent/dedent in leading whitespace
set shiftround                        " always indent by multiple of shiftwidth
set shiftwidth=2                      " spaces per tab (when shifting)

set splitbelow                        " open horizontal splits below current window
set splitright                        " open vertical splits to the right of the current window
set textwidth=120                     " automatically hard wrap at 120 columns
set scrolloff=3                       " start scrolling 3 lines before edge of viewport
set sidescrolloff=3                   " same as scolloff, but for columns

" Color scheme
" Use 24-bit (true-color) mode in Vim/Neovim.
" If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
" (see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (has("nvim"))
  " For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
if (has("termguicolors"))
  set termguicolors                   " Use 24-bit colors
endif
set background=dark
colorscheme base16-ocean

" set guifont=SF\ Mono:h14

" Lightline theme
let g:lightline = {
  \ 'colorscheme': 'one',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'gitbranch#name',
  \   'filename': 'LightlineTruncatedFileName'
  \ },
  \ }
function! LightlineTruncatedFileName()
  let l:filePath = expand('%')
  if winwidth(0) > 100
    return l:filePath
  else
    return pathshorten(l:filePath)
  endif
endfunction

" ALE
" see https://github.com/alexlafroscia/dotfiles/blob/master/nvim/plugin/ale.vim
" Use a slightly slimmer error pointer
let g:ale_sign_error = '✖'
hi ALEErrorSign guifg=#DF8C8C guibg=#343D46
let g:ale_sign_warning = '⚠'
hi ALEWarningSign guifg=#F2C38F guibg=#343D46
" Use ALT-k and ALT-j to navigate errors
nmap <silent> ˚ <Plug>(ale_previous_wrap)
nmap <silent> ∆ <Plug>(ale_next_wrap)

" GitGutter
nmap ]c <Plug>(GitGutterNextHunk)
nmap [c <Plug>(GitGutterPrevHunk)
nmap <Leader>ha <Plug>(GitGutterStageHunk)
nmap <Leader>hr <Plug>(GitGutterUndoHunk)

" fzf
set rtp+=~/.fzf
set rtp+=/usr/local/opt/fzf
map <Leader><S-P> :Files<CR>
map <Leader>p :GFiles<CR>
map <Leader>b :Buffers<CR>
map <Leader>f :Rg!

" lsp
if has('nvim')
  packadd nvim-lspconfig
  runtime lsp.vim
endif

" ddc
if has('nvim')
  packadd ddc.vim
  packadd denops.vim
  packadd ddc-nvim-lsp
  packadd ddc-around
  packadd ddc-matcher_head
  packadd ddc-sorter_rank
  runtime ddc.vim
endif

" dap
if has('nvim')
  packadd nvim-dap
  runtime dap.vim
endif

" vim-polyglot
let g:svelte_indent_script = 0
let g:svelte_indent_style = 0

" defx
map <Leader><space> :Defx -resume -search=`expand('%:p')` `getcwd()` -toggle<CR>
autocmd BufWritePost * call defx#redraw()
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('preview')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_tree', 'toggle')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
endfunction

" tern
" Use tern_for_vim.
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent", "--no-port-file"]
" enable tern default key mappings https://github.com/ternjs/tern_for_vim/blob/master/doc/tern.txt
" execute 'nnoremap <buffer> '.prefix.'tD' ':TernDoc<CR>'
" execute 'nnoremap <buffer> '.prefix.'tb' ':TernDocBrowse<CR>'
" execute 'nnoremap <buffer> '.prefix.'tt' ':TernType<CR>'
" execute 'nnoremap <buffer> '.prefix.'td' ':TernDef<CR>'
" execute 'nnoremap <buffer> '.prefix.'tpd' ':TernDefPreview<CR>'
" execute 'nnoremap <buffer> '.prefix.'tsd' ':TernDefSplit<CR>'
" execute 'nnoremap <buffer> '.prefix.'ttd' ':TernDefTab<CR>'
" execute 'nnoremap <buffer> '.prefix.'tr' ':TernRefs<CR>'
" execute 'nnoremap <buffer> '.prefix.'tR' ':TernRename<CR>'
let g:tern_map_keys = 1
