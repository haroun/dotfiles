" Syntax highlighting
filetype plugin indent on
syntax on

set number                            " show line numbers in gutter
if exists('+relativenumber')
  set relativenumber                  " show relative numbers in gutter
endif

set tabstop=2                         " spaces per tab
set expandtab                         " always use spaces instead of tabs
set smarttab                          " <tab>/<BS> indent/dedent in leading whitespace
set shiftround                        " always indent by multiple of shiftwidth
set shiftwidth=2                      " spaces per tab (when shifting)

set splitbelow                        " open horizontal splits below current window
set splitright                        " open vertical splits to the right of the current window
set textwidth=120                     " automatically hard wrap at 120 columns
set scrolloff=3                       " start scrolling 3 lines before edge of viewport
set sidescrolloff=3                   " same as scolloff, but for columns

set foldmethod=indent

" Color scheme
" Use 24-bit (true-color) mode in Vim/Neovim.
" If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
" (see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (has("nvim"))
  " For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
if (has("termguicolors"))
  set termguicolors                   " Use 24-bit colors
endif
set background=dark
colorscheme nord

" set guifont=SF\ Mono:h14

" Lightline theme
let g:lightline = {
  \ 'colorscheme': 'one',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'gitbranch#name',
  \   'filename': 'LightlineTruncatedFileName'
  \ },
  \ }
function! LightlineTruncatedFileName()
  let l:filePath = expand('%')
  if winwidth(0) > 100
    return l:filePath
  else
    return pathshorten(l:filePath)
  endif
endfunction

" Set augroup.
augroup MyAutoCmd
  autocmd!
  autocmd BufReadPre *?
    \ call vimrc#check_syntax()
  autocmd FileType,Syntax,BufNewFile,BufNew,BufRead *?
    \ call vimrc#on_filetype()
augroup END

" ALE
" see https://github.com/alexlafroscia/dotfiles/blob/master/nvim/plugin/ale.vim
" Use a slightly slimmer error pointer
let g:ale_sign_error = '✖'
hi ALEErrorSign guifg=#DF8C8C guibg=NONE
let g:ale_sign_warning = '>'
hi ALEWarningSign guifg=#F2C38F guibg=NONE
" Use ALT-k and ALT-j to navigate errors
nmap <silent> ˚ <Plug>(ale_previous_wrap)
nmap <silent> ∆ <Plug>(ale_next_wrap)

" GitGutter
nmap ]c <Plug>(GitGutterNextHunk)
nmap [c <Plug>(GitGutterPrevHunk)
nmap <Leader>ha <Plug>(GitGutterStageHunk)
nmap <Leader>hr <Plug>(GitGutterUndoHunk)

" fzf
set rtp+=~/.fzf
set rtp+=/usr/local/opt/fzf
map <Leader><S-P> :Files<CR>
map <Leader>p :GFiles<CR>
map <Leader>o :Buffers<CR>
map <Leader>f :Rg!

" treesitter
if has('nvim')
  packadd nvim-treesitter
  runtime nvim-treesitter.lua
endif

" lsp
if has('nvim')
  packadd nvim-lspconfig
  " runtime lsp.vim TODO remove
  runtime lsp.lua
endif

" ddc + ddu
if has('nvim')
  packadd denops.vim
  packadd deol.nvim
  packadd pum.vim

  " ddc
  packadd ddc.vim
  " Install your UIs
  packadd ddc-ui-inline
  packadd ddc-ui-native
  packadd ddc-ui-none
  packadd ddc-ui-pum
  " Install your sources
  packadd ddc-buffer
  packadd ddc-source-around
  packadd ddc-source-cmdline
  packadd ddc-source-cmdline-history
  packadd ddc-source-file
  packadd ddc-source-input
  packadd ddc-source-line
  packadd ddc-source-nvim-lsp
  packadd ddc-source-omni
  packadd ddc-source-rg
  packadd ddc-source-zsh
  packadd neco-vim
  " Install your filters
  packadd ddc-converter_remove_overlap
  packadd ddc-converter_truncate_abbr
  packadd ddc-matcher_head
  packadd ddc-matcher_length
  packadd ddc-sorter_rank

  " ddu
  packadd ddu.vim
  " Install your UIs
  packadd ddu-ui-ff
  packadd ddu-ui-filer
  " Install your sources
  packadd ddu-source-action
  packadd ddu-source-buffer
  packadd ddu-source-command_history
  packadd ddu-source-file
  packadd ddu-source-file_external
  packadd ddu-source-file_old
  packadd ddu-source-file_point
  packadd ddu-source-file_rec
  packadd ddu-source-line
  packadd ddu-source-markdown
  packadd ddu-source-register
  packadd ddu-source-rg
  " Install your filters
  packadd ddu-filter-converter_display_word
  packadd ddu-filter-matcher_hidden
  packadd ddu-filter-matcher_relative
  packadd ddu-filter-matcher_substring
  packadd ddu-filter-sorter_alpha
  " Install your kinds
  packadd ddu-kind-file
  packadd ddu-kind-word
  " Install your columns
  packadd ddu-column-filename
  " Misc
  packadd ddu-commands.vim

  runtime ddc.vim
  runtime ddu.vim
endif

" dap
if has('nvim')
  packadd nvim-dap
  runtime dap.vim
endif

" markdown
if has('nvim')
  packadd peek.nvim
  runtime markdown.lua
endif

" vim-polyglot
let g:svelte_indent_script = 0
let g:svelte_indent_style = 0

" tern
" Use tern_for_vim.
let g:tern#command = ["tern"]
let g:tern#arguments = ["--persistent", "--no-port-file"]
" enable tern default key mappings https://github.com/ternjs/tern_for_vim/blob/master/doc/tern.txt
" execute 'nnoremap <buffer> '.prefix.'tD' ':TernDoc<CR>'
" execute 'nnoremap <buffer> '.prefix.'tb' ':TernDocBrowse<CR>'
" execute 'nnoremap <buffer> '.prefix.'tt' ':TernType<CR>'
" execute 'nnoremap <buffer> '.prefix.'td' ':TernDef<CR>'
" execute 'nnoremap <buffer> '.prefix.'tpd' ':TernDefPreview<CR>'
" execute 'nnoremap <buffer> '.prefix.'tsd' ':TernDefSplit<CR>'
" execute 'nnoremap <buffer> '.prefix.'ttd' ':TernDefTab<CR>'
" execute 'nnoremap <buffer> '.prefix.'tr' ':TernRefs<CR>'
" execute 'nnoremap <buffer> '.prefix.'tR' ':TernRename<CR>'
let g:tern_map_keys = 1
