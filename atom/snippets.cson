# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.editorconfig':
  'root':
    'prefix': 'root#default'
    'body': '''
      root = true

      [*]
      charset = utf-8
      indent_size = 2
      indent_style = space
      end_of_line = lf
      insert_final_newline = true
      trim_trailing_whitespace = true

      [*.md]
      trim_trailing_whitespace = false

      [Makefile]
      indent_style = tab
    '''
'.source.js':
  'test':
    'prefix': 'test#tape'
    'body': '''
      test('${1:What component aspect are you testing?}', assert => {
        const message = '${2:What should the feature do?}'

        const actual = ${3:'What is the actual output?'}
        const expected = ${4:'What is the expected output?'}

        assert.equal(actual, expected, message)

        assert.end()
      })
      '''
  'pipe':
    'prefix': 'pipe#functional'
    'body': '''
      // pipe(...functions: [...Function]) => initial => result
      // Create a pipeline of functions to iterate over left to right
      const pipe = (...functions) => initial =>
        functions.reduce((accumulator, current) => current(accumulator), initial)
      '''
  'compose':
    'prefix': 'compose#functional'
    'body': '''
      // compose(...functions: [...Function]) => initial => result
      // Create a pipeline of functions to iterate over right to left
      const compose = (...functions) => initial =>
        functions.reduceRight((accumulator, current) => current(accumulator), initial)
    '''
  'curry':
    'prefix': 'curry#functional'
    'body': '''
      // curry(f: Function, arr: Array) => result
      // Autocurry, return a function that takes multiple parameters one at a time
      const curry = (f, arr = []) =>
        (...args) => (
          a => a.length === f.length ? f(...a) : curry(f, a)
        )([...arr, ...args])
    '''
  'reduce':
     'prefix': 'reduce#functional'
     'body': '''
        ${1:array}.reduce((accumulator, current) => {
          ${2:// Body}
        }, ${3:initial})
     '''
  'reducer':
    'prefix': 'reducer'
    'body': '''
      const ${1:myReducer} = (state = {}, action = {}) => {
        const {type, payload} = action
        switch (type) {
          case '${2:FOO}': return {...state, ...payload}
          default: return state
        }
      }
    '''
'.source.json':
  'postversion':
    'prefix': 'postversion'
    'body': '''
      "postversion": "git push && git push --tags"
    '''
  'start':
    'prefix': 'start'
    'body': '''
      "start": "${1:export $(cat .env | xargs); }node ${2:index.js}"
    '''
  'test':
    'prefix': 'test#tape'
    'body': '''
      "test": "tape '{,!(node_modules)/**/}*.test.js' | faucet"
    '''
  'xo':
    'prefix': 'xo'
    'body': '''
      "xo": {
        "space": true,
        "semicolon": false,
        "rules": {
          "indent": [
            "error",
            2,
            {
              "ignoredNodes": [
                "ConditionalExpression"
              ]
            }
          ],
          "operator-linebreak": [
            "error",
            "after",
            {
              "overrides": {
                "?": "before",
                ":": "before",
                "||": "before"
              }
            }
          ]
        }
      }
    '''
'.text.plain':
  'node':
    'prefix': 'node'
    'body': '''
      .env
      node_modules
      npm-debug.log
    '''
