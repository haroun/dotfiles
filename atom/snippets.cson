# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.js':
  'test':
    'prefix': 'test#tape'
    'body': '''
      test('${1:What component aspect are you testing?}', assert => {
        const message = '${2:What should the feature do?}'

        const actual = ${3:'What is the actual output?'}
        const expected = ${4:'What is the expected output?'}

        assert.equal(actual, expected, message)

        assert.end()
      })
      '''
  'pipe':
    'prefix': 'pipe#functional'
    'body': '''
      // pipe(...functions: [...Function]) => initial => result
      // Create a pipeline of functions to iterate over left to right
      const pipe = (...functions) => inital => functions.reduce((accumulator, current) => current(accumulator), initial)
      '''
  'compose':
    'prefix': 'compose#functional'
    'body': '''
      // compose(...functions: [...Function]) => initial => result
      // Create a pipeline of functions to iterate over right to left
      const compose = (...functions) => initial => functions.reduceRight((accumulator, current) => current(accumulator), initial)
    '''
  'curry':
    'prefix': 'curry#functional'
    'body': '''
      // curry(f: Function, arr: Array) => result
      // Autocurry, return a function that takes multiple parameters one at a time
      const curry = (f, arr = []) =>
        (...args) => (
          a => a.length === f.length ? f(...a) : curry(f, a)
        )([...arr, ...args])
    '''
  'reduce':
     'prefix': 'reduce#functional'
     'body': '''
        ${1:array}.reduce((accumulator, current) => {
          ${2:// Body}
        }, ${3:initial})
     '''
  'reducer':
    'prefix': 'reducer'
    'body': '''
      const ${1:myReducer} = (state = {}, action = {}) => {
        const {type, payload} = action
        switch (type) {
          case '${2:FOO}': return {...state, ...payload}
          default: return state
        }
      }
    '''
